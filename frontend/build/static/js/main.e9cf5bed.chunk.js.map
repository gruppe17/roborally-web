{"version":3,"sources":["styling/SpaceComponent.module.scss","styling/App.module.scss","styling/BoardComponent.module.scss","styling/NavBarComponent.module.scss","context/GameContext.ts","components/SpaceComponent.tsx","components/BoardComponent.tsx","components/MenuComponent.tsx","components/NavBarComponent.tsx","api/GameApi.ts","context/GameContextProvider.tsx","App.tsx","reportWebVitals.ts","index.tsx","styling/MenuComponent.module.scss"],"names":["module","exports","GameContext","createContext","loaded","board","playerDtos","spaceDtos","boardId","boardName","currentPlayerDto","undefined","height","width","setCurrentPlayerOnSpace","a","switchCurrentPlayer","SpaceComponent","space","useContext","color","useMemo","x","y","onClickField","useCallback","playerId","playerColor","res","find","value","className","styles","onClick","BoardComponent","container","map","spaceArray","index","MenuComponent","NavBarComponent","navbar","href","GameApi","BACKEND_URL","axios","get","this","then","data","put","instance","getInstance","GameContextProvider","children","useState","setLoaded","useEffect","getBoard","setSpaces","setPlayers","setWidth","setHeight","setGameId","setGameName","setCurrentPlayer","forEach","player","setCurrentPlayerIndex","catch","console","error","players","playerCount","length","currentPlayerIndex","playerName","currentPlayer","spaces","gameId","gameName","setPlayerOnSpace","moveCurrentPlayer","tempSpaces","tempPlayers","switchToNextPlayer","switchPlayer","newPlayerIndex","log","Provider","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9cf5bed.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"blackSpace\":\"SpaceComponent_blackSpace__3llIS\",\"whiteSpace\":\"SpaceComponent_whiteSpace__bX3a4\",\"redPlayer\":\"SpaceComponent_redPlayer__3EqEe\",\"greenPlayer\":\"SpaceComponent_greenPlayer__3hY7u\",\"yellowPlayer\":\"SpaceComponent_yellowPlayer__3FEQb\",\"bluePlayer\":\"SpaceComponent_bluePlayer__cGlRa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"App_game__2kNJg\",\"board\":\"App_board__LlZco\",\"centered\":\"App_centered__fWv3C\",\"container\":\"App_container__MvJio\",\"shadowed\":\"App_shadowed__2bbZL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"BoardComponent_container__27ZJP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"NavBarComponent_navbar__2qlgb\",\"nav-link-row\":\"NavBarComponent_nav-link-row__NBUxX\",\"nav-link-text\":\"NavBarComponent_nav-link-text__xrWTV\",\"nav-icon\":\"NavBarComponent_nav-icon__3Dtl-\",\"nav-title\":\"NavBarComponent_nav-title__2J7Rn\",\"btn\":\"NavBarComponent_btn__1jrQY\",\"active\":\"NavBarComponent_active__368cP\"};","import {createContext} from \"react\";\r\nimport {Board} from \"../types/Board\";\r\nimport {Space} from \"../types/Space\";\r\n\r\nexport type GameContextType = {\r\n    loaded : boolean,\r\n    board: Board,\r\n    setCurrentPlayerOnSpace: (space: Space) => Promise<void>,\r\n    switchCurrentPlayer: () => Promise<void>\r\n}\r\n//Define a new context of type GameContextType\r\n//Below we define the \"default\" values which are set upon initialization of the context\r\n\r\nconst GameContext = createContext<GameContextType>({\r\n    loaded : false,\r\n    board: {\r\n        playerDtos: [],\r\n        spaceDtos: [],\r\n        boardId: -1,\r\n        boardName: \"\",\r\n        currentPlayerDto: undefined,\r\n        height: 0,\r\n        width: 0\r\n    },\r\n    setCurrentPlayerOnSpace: async () => {\r\n    },\r\n    switchCurrentPlayer: async () => {\r\n    }\r\n});\r\n\r\nexport default GameContext","import {FunctionComponent, useCallback, useContext, useMemo} from \"react\";\r\nimport {Space} from \"../types/Space\";\r\nimport GameContext from \"../context/GameContext\";\r\nimport styles from \"../styling/SpaceComponent.module.scss\"\r\n\r\nexport type SpaceComponentProps = {\r\n    space: Space\r\n}\r\n/*\r\n Note that we are explicitly specifying that SpaceComponent is of the type FunctionComponent,\r\n and that the props are of type SpaceComponentProps, also note that we use object destructuring to \"unpack\" the props.\r\n */\r\n\r\nexport const SpaceComponent: FunctionComponent<SpaceComponentProps> = ({space}) => {\r\n    const {board, setCurrentPlayerOnSpace, switchCurrentPlayer,} = useContext(GameContext)\r\n    //Below we essentially define a new variable using the useMemo hook, which can only take the value \"white\" or \"black\"\r\n    //Additionally the code inside the hook (the calculation of whether it is black or white) is only executed\r\n    // when the space prop updates (this is known as the dependencies of the hook)\r\n    const color = useMemo<\"white\" | \"black\">(() => {\r\n        if ((space.x + space.y) % 2 === 0) {\r\n            return \"white\"\r\n        } else {\r\n            return \"black\"\r\n        }\r\n    }, [space])\r\n    //We define a function using the useCallback hook, it returns a memoized callback/function that is only\r\n    // updated when the dependencies update.\r\n    const onClickField = useCallback(async () => {\r\n        if (!space.playerId) { // A shorthand, check equivalents at https://bit.ly/2MnA4Rk\r\n            await setCurrentPlayerOnSpace(space)\r\n            switchCurrentPlayer()\r\n        }\r\n    }, [setCurrentPlayerOnSpace, space, switchCurrentPlayer])\r\n    const playerColor = useMemo(() => {\r\n        const res = board.playerDtos.find(value => value.playerId === space.playerId)\r\n        if (res) return res.playerColor\r\n    }, [board.playerDtos, space.playerId])\r\n    return (\r\n        //The classname is set dynamically and can either take the value styles.whiteSpace or styles.blackSpace\r\n        //We also define that the callback should be called when the div is clicked\r\n        <div className={styles[color + \"Space\"]} onClick={onClickField}>\r\n            {/*if space.player is set render the div*/}\r\n            {(space.playerId && playerColor) && <div className={styles[playerColor + \"Player\"]}/>}\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\n\r\n","import React, {FunctionComponent, useContext} from 'react';\r\nimport {SpaceComponent} from \"./SpaceComponent\";\r\nimport styles from \"../styling/BoardComponent.module.scss\" //Import css module\r\nimport GameContext from \"../context/GameContext\";\r\n/*\r\nIf the board component took any props/arguments they would be declared inside the type below\r\nsee the space component for an example.\r\n */\r\n\r\ntype BoardComponentProps = {}\r\nconst BoardComponent: FunctionComponent<BoardComponentProps> = () => {\r\n    //{...} context is known as object destructuring\r\n    const {board, loaded} = useContext(GameContext) //Hook form of Context.Consumer, used to access the context\r\n\r\n    return (\r\n        /*Apply css on div below*/\r\n        <div className={styles.container}>\r\n            {/*\r\n                The {...} notation is JSX allowing us to blend HTML and JS/TS together\r\n                The first map call returns an array of \"divs\" which are rendered.\r\n                Keys helps react identify where a change has happend and thus which component to rerender upon changes\r\n                The last map returns an array of space components, note that a prop/argument is passed (\"space\")\r\n                The result of the code segment below will be something like:\r\n                    <div key=\"spaceArray0\">\r\n                        <SpaceComponent key=\"space0\" space={SOME_SPACE_OBJECT}/>\r\n                        ...\r\n                        <SpaceComponent key=\"space7\" space={SOME_SPACE_OBJECT}/>\r\n                    </div>\r\n                    ....\r\n                    <div key=\"spaceArray7\">\r\n                        <SpaceComponent key=\"space0\" space={SOME_SPACE_OBJECT}/>\r\n                        ...\r\n                        <SpaceComponent key=\"space7\" space={SOME_SPACE_OBJECT}/>\r\n                    </div>\r\n\r\n            */}\r\n            {loaded ? (\r\n\r\n                board.spaceDtos.map((spaceArray, index) =>\r\n                    <div key={\"spaceArray\" + index}>\r\n                        {\r\n                            spaceArray.map((space, index) => <SpaceComponent key={\"space\" + index} space={space}/>)\r\n                        }\r\n                    </div>\r\n                )\r\n\r\n            ) : <h1>loading...</h1>}\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BoardComponent\r\n\r\n\r\n","import React, { ReactElement } from 'react'\r\nimport styles from \"../styling/MenuComponent.module.scss\"\r\ninterface Props {\r\n    \r\n}\r\n\r\nfunction MenuComponent({}: Props): ReactElement {\r\n    return (\r\n        <div className={styles[\"menu\"]}>\r\n            <div className={styles[\"button-row\"]}>\r\n              <button className={styles[\"btn\"]}>New game</button>\r\n              <button className={styles[\"btn\"]}>Games</button>\r\n              <button className={styles[\"btn\"]}>Players</button>\r\n            </div>\r\n\r\n            <div className={styles[\"menu-content\"]}>\r\n              Each button will have different content here. The white button is\r\n              the active menu. <br /> When the game is active this might show\r\n              your program register and cards\r\n            </div>\r\n          </div>\r\n     \r\n    )\r\n}\r\n\r\nexport default MenuComponent\r\n","import React, { ReactElement } from 'react'\r\nimport styles from \"../styling/NavBarComponent.module.scss\" //Import css module\r\n\r\n\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nexport default function NavBarComponent({}: Props): ReactElement {\r\n    return (\r\n        <div className={styles.navbar}>\r\n        <div className={styles[\"nav-title\"]}>Roborally</div>\r\n        <a href=\"#\" className={styles[\"nav-link-row\"]}>\r\n          <div className={styles[\"nav-icon\"]}>▶️</div>\r\n          <div className={styles[\"nav-link-text\"]}>Play</div>\r\n        </a>\r\n        <a href=\"#\" className={styles[\"nav-link-row\"]}>\r\n          <div className={styles[\"nav-icon\"]}>❔</div>\r\n          <div className={styles[\"nav-link-text\"]}>Help</div>\r\n        </a>\r\n      </div>\r\n\r\n    )\r\n}\r\n","import axios from \"axios\";\r\nimport {Board} from \"../types/Board\";\r\nimport {Space} from \"../types/Space\";\r\n\r\nclass GameApi{\r\n    private static instance : GameApi;\r\n    private readonly BACKEND_URL = \"http://localhost:8080\"\r\n    private constructor() {}\r\n\r\n    public static getInstance():GameApi{\r\n        if(!GameApi.instance){\r\n            GameApi.instance = new GameApi();\r\n        }\r\n        return GameApi.instance;\r\n    }\r\n\r\n    public getBoard(boardId : number){\r\n        return axios.get<Board>(`${this.BACKEND_URL}/board/${boardId}`).then(value =>value.data)\r\n    }\r\n\r\n    public moveCurrentPlayer(boardId : number, space : Space){\r\n        return axios.put(`${this.BACKEND_URL}/board/${boardId}/move`,space)\r\n    }\r\n\r\n    public switchPlayer(boardId : number){\r\n        return axios.put(`${this.BACKEND_URL}/board/${boardId}/switchplayer`)\r\n    }\r\n}\r\n\r\nexport default GameApi.getInstance()","import React, {ReactNode, useCallback, useEffect, useMemo, useState} from \"react\"\r\nimport GameContext from \"./GameContext\"\r\nimport {Player} from \"../types/Player\";\r\nimport {Board} from \"../types/Board\";\r\nimport {Space} from \"../types/Space\";\r\nimport GameApi from \"../api/GameApi\";\r\n\r\ntype GameContextProviderPropsType = {\r\n    children: ReactNode\r\n}\r\n\r\n\r\nconst GameContextProvider = ({children}: GameContextProviderPropsType) => {\r\n    const [loaded, setLoaded] = useState<boolean>(false)\r\n    useEffect(() => {\r\n        GameApi.getBoard(1).then(board => {\r\n            setSpaces(board.spaceDtos)\r\n            setPlayers(board.playerDtos)\r\n            setWidth(board.width)\r\n            setHeight(board.height)\r\n            setGameId(board.boardId)\r\n            setGameName(board.boardName)\r\n            if (board.currentPlayerDto) {\r\n                setCurrentPlayer(board.currentPlayerDto)\r\n                board.playerDtos.forEach((player,index)=>{\r\n                    if(player.playerId === board.currentPlayerDto?.playerId){\r\n                        setCurrentPlayerIndex(index)\r\n                    }\r\n                })\r\n\r\n            }\r\n\r\n            setLoaded(true)\r\n        }).catch(() => {\r\n            console.error(\"Error while fetching board from backend\")\r\n        })\r\n    }, [])\r\n    //The code below is executed when the provider is rendered (inside App.tsx)\r\n    //The code should fetch the data from the API instead of using a static assignment\r\n    //Define a useState variable, note that useState returns an array, containing that state itself aswell as\r\n    // a function to set a new state value, here we use array destructuring (the [..., ...] notation).\r\n    // we also declare that the state variable and setter should be of type /take type Player[]\r\n    const [players, setPlayers] = useState<Player[]>([])\r\n    const playerCount = useMemo(() => players.length, [players])\r\n    const [currentPlayerIndex, setCurrentPlayerIndex] = useState<number>(0)\r\n    const [currentPlayer, setCurrentPlayer] = useState<Player>({playerId : -1,playerColor:\"red\",boardId : -1,playerName : \"\"})\r\n    const [spaces, setSpaces] = useState<Space[][]>([])\r\n    const [width, setWidth] = useState<number>(0)\r\n    const [height, setHeight] = useState<number>(0)\r\n    const [gameId, setGameId] = useState<number>(0)\r\n    const [gameName, setGameName] = useState<string>(\"hi\")\r\n\r\n    //Define a function used to set a player ona  specific space\r\n    const setPlayerOnSpace = useCallback(async (space: Space) => {\r\n        //Check if space already has a player standing on it\r\n        if (!space.playerId) {\r\n            await GameApi.moveCurrentPlayer(gameId, {...space, playerId: currentPlayer.playerId}).then(() => {\r\n                let tempSpaces = [...spaces] //Use spread operator to copy spaces array, needed for making immutable changes\r\n                //See https://bit.ly/2My8Bfz, until the section about Immutable.js\r\n                tempSpaces[space.x][space.y].playerId = currentPlayer.playerId //Set the player on the new space they clicked on\r\n\r\n                if (currentPlayer.x !== undefined && currentPlayer.y !== undefined) { //If the player was standing on a space previously, remove them from that space\r\n                    tempSpaces[currentPlayer.x][currentPlayer.y].playerId = undefined\r\n                }\r\n                setSpaces(tempSpaces)\r\n                let tempPlayers = [...players]\r\n                tempPlayers[currentPlayerIndex].x = space.x; //Update the players array to reflect the changes\r\n                tempPlayers[currentPlayerIndex].y = space.y; //Update the players array to reflect the changes\r\n                setPlayers(tempPlayers)\r\n                setCurrentPlayer({...currentPlayer, x: space.x, y: space.y}) //Update current player\r\n\r\n            }).catch(() => {\r\n                console.error(\"Error while moving player\")\r\n            })\r\n\r\n        }\r\n\r\n    }, [currentPlayer, currentPlayerIndex, gameId, players, spaces])\r\n\r\n    const switchToNextPlayer = useCallback(async () => {\r\n        await GameApi.switchPlayer(gameId).then(()=>{\r\n            const newPlayerIndex = (currentPlayerIndex + 1) % playerCount\r\n            console.log(\"old player index\", currentPlayerIndex, \"new player index\", newPlayerIndex)\r\n            setCurrentPlayer(players[newPlayerIndex])\r\n            setCurrentPlayerIndex(newPlayerIndex)\r\n        }).catch(()=>console.error(\"Error while switching player\"))\r\n        \r\n    }, [currentPlayerIndex, gameId, playerCount, players])\r\n    const board = useMemo<Board>(() => {\r\n        return ({\r\n            spaceDtos: spaces,\r\n            playerDtos: players,\r\n            currentPlayerDto: currentPlayer,\r\n            currentPlayerIndex: currentPlayerIndex,\r\n            width: width,\r\n            height: height,\r\n            boardName: gameName,\r\n            boardId: gameId\r\n        })\r\n    }, [currentPlayer, currentPlayerIndex, gameId, gameName, height, players, spaces, width])\r\n\r\n\r\n    return (\r\n        <GameContext.Provider\r\n            value={\r\n                {\r\n                    loaded: loaded,\r\n                    board: board,\r\n                    setCurrentPlayerOnSpace: setPlayerOnSpace,\r\n                    switchCurrentPlayer: switchToNextPlayer\r\n                }\r\n            }>\r\n            {children} {/*See: https://reactjs.org/docs/composition-vs-inheritance.html*/}\r\n        </GameContext.Provider>\r\n    )\r\n}\r\n\r\nexport default GameContextProvider","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from \"react\";\r\nimport BoardComponent from \"./components/BoardComponent\";\r\nimport MenuComponent from \"./components/MenuComponent\";\r\nimport NavBarComponent from \"./components/NavBarComponent\";\r\nimport GameContextProvider from \"./context/GameContextProvider\";\r\nimport styles from \"./styling/App.module.scss\"; //Import css module\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\"></header>\r\n\r\n      {/*Context provider component below makes sure the context is accessible in any children components*/}\r\n      <GameContextProvider>\r\n        <div className={styles.container}>\r\n          <NavBarComponent />\r\n          <div className={styles[\"game\"]}>\r\n            <BoardComponent />\r\n          </div>\r\n          <MenuComponent/>\r\n        </div>\r\n      </GameContextProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n/**\r\n * The \"main\" render method\r\n */\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"MenuComponent_menu__30J9I\",\"menu-content\":\"MenuComponent_menu-content__1cFUQ\",\"button-row\":\"MenuComponent_button-row__3my60\",\"btn\":\"MenuComponent_btn__1aovQ\",\"nav-link-row\":\"MenuComponent_nav-link-row__2Fgxj\",\"active\":\"MenuComponent_active__2ONR3\"};"],"sourceRoot":""}